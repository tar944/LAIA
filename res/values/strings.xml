<?xml version="1.0" encoding="utf-8"?>
<resources>

    <string name="app_name">Laia</string>
    <string name="app_title">Learn Android in Android</string>
    
    <string name="what">1. What is Android?</string>
    <string name="howto">2. How to Develop for Android?</string>
    <string name="activities">3. How to use Activities?</string>
    <string name="manifest">4. What does the manifest do?</string>
    <string name="layouts">5. How to make a UI with a Layout?</string>
    <string name="values">6. How to own a universal app?</string>
    <string name="menu">7. How to make a functional Menu?</string>
    <string name="debug">8. How to debug my application?</string>
    
    <string name="about">About</string>
    <string name="about_title">About LAIA</string>
    <string name="about_text">LAIA or Learn Android in your Android is a reference app to learn the basics of Android Development. If you want to contribute with any lesson, or the app in general, please check the links below.</string>
    
    <string name="button_xda">LAIA at XDA</string>
    <string name="button_github">OpenSource at GitHub</string>
    <string name="button_paypal">Support the project by PayPal</string>
    <string name="about_donations">PayPal donations do not grant any updates or improvements, they just support the work of the developer. App will remain free without donating.</string>
    
    <string name="hello_world">Hello world!</string>
    
    <string name="title_activity_what">LAIA</string>
    <string name="intro_what">Android is an Opensource OS built by Google designed for mobile phones, tablets, as well as media players. Android was initially developed by Android Inc. and Google purchased the company in 2005. Google releases the code under the Apache License in the AOSP Project (Android Open Source Project). Android has a large community of developers who are writing applications or custom ROMS, written primarily in a customized version of the Java programming language, C, and C++. In this guide you will learn how to start in this kind of development (JAVA). Learning C and C++ requires extensive learning and time. Knowing these two languages will help you to build kernels and custom ROMS. So for the sake of the App, I will assist you on how to start writing simple apps in Java and hopefully someday leading you to learn more and expand your developing capablities.</string>
    <string name="subtitle_what">Features of Android</string>
    <string name="a_what">The UI (User Interface) in Android is based on direct manipulation by touch or even a mouse. You can swipe, tap, and pinch to manipulate on-screen objects. You will create those objects in your layout and make the function of those objects in your Activity. Those parts will be analyzed in this tutorial. The device interacts with the user by the vibration, accelerometers, gyroscopes and other sensors by your application.</string>
    <string name="b_what">Android devices boot to the home screen with a Launcher App. Those launchers are made with app icons and widgets from the associated app. Third party apps (like yours) will be available on Google Play.</string>
    <string name="c_what">On the top of the screen you will find a status bar, showing information about the device and its connectivity. It can be pulled down to reveal a notification screen where apps display important information or updates. Notifications are persistent until read or dismissed by the user.</string>
    <string name="d_what">Custom Compilations of Android</string>
    <string name="e_what">As Android is an Opensource project, the carriers modify the OS to their devices and also provide their updates with the base of the AOSP. But normally those updates come very late or they don’t arrive, which is commonly called fragmentation. In the battle of Fragmentation we can find CyanogenMod. It’s an aftermarket distribution of Android based on the git of the AOSP channel. It’s officially offered to a large number of devices and ported to almost any android device in a non-official way.</string>
    
    <string name="title_activity_howto">LAIA</string>
    <string name="intro_howto">The development on Android is based on the Java library that is modified by Google, so we will use a Java IDE as Eclipse or Netbeans. Google has focused in the Eclipse IDE during the last years building a special plugin for developing. This guide is not based in showing you how to configure the Eclipse IDE. Just search in Google how to install the ADT Plugin and download the SDK for your OS. I recommend you to install the bases of 2.3 and 4.X. Also, if you want to improve any app on your mobile device, you can try AIDE.</string>
    <string name="subtitle_howto">Eclipse Interface and workspaces</string>
    <string name="a_howto">We suppose that you have already Installed Eclipse Juno because we will be using it with the ADT Plugin and the latest version of the Android SDK. Inside the Eclipse IDE we will find under the menu File\new/Project some options with our project. In this second chapter we will create a test project.</string>
    <string name="b_howto">Inside the New Android Application window we will define the name, the package, the version… of our new application. I recommend that you use 2.2 to 4.X (Depending of the packages you have installed in your SDK). For the moment we will choose a Holo design based in 4.0+ guidelines.</string>
    <string name="c_howto">Once we have finished in the window, a new project will be created and then we will be able to see our Layout! In Android we will face two basic ways of developing, the graphical (using Layouts as we will see in Chapter 5 plus adding sources of code) and the coding (Using the activities as we will see in Chapter 3). But for a great app we must use the two ways as we will see in this Book.</string>
    <string name="d_howto">Analyzing what Google Provides in a Blank App</string>
    <string name="e_howto">We have created our first app that Google gave us great help to start with. At first they gave us some of the code needed to run the app. So the app runs okay without doing anything else, but it only shows the Hello World sentence!</string>
    <string name="f_howto">As we see in the picture we have our app structured; now we will explain some of the components of the structure. The .java files contain the Activities, this file will start our application, and any advanced function will be done inside this file (Chapter 3). The gen folder contains some files you must not delete! Inside the res folder you will get the Layout files (Chapter 5), the menu files (Chapter 7) and the Strings files (Chapter 6). Also here in the res folder we find the drawables folders where we place our images for the app. Finally we find the AndroidManisfest.xml where we locate all the info about the app to the Android OS as the permissions, the activities… (Chapter 4). So without further delay lets go on to the real programming with the following chapters!</string>
    
    <string name="title_activity_activities">LAIA</string>
    <string name="a_activity">An activity is the source of your future app. It will start with the creation of the App inside the device and it will allow you to do advanced options inside your app. But we are not here to make theory, lets advance with the activities.</string>
    <string name="b_activity">Blank Application Structure</string>
    <string name="c_activity">In the picture we can see the package that we have specified when we created the project. This package will refer to your domain.apppackage.appname. In my case I used "org.sferadev.tryme". I am establishing as a domain org, my developer name as a apppackage and the name of the project in appname. Inside the new Activity, the source folder (src), we will find the .java file.</string>
    <string name="d_activity">Basics in my Activity</string>
    <string name="e_activity">In my project I have created a TryActivity.java and a activity_try.xml. We will now compare the auto generated code inside our app.</string>
    <string name="f_activity">How do we define components?</string>
    <string name="g_activity">Android is based on JAVA, therefore an object language. We will create objects and define each object and its properties. We can define it inside the Activity or in the Layout. As this chapter is for Activities, we will declare any item inside our Activity. We have two methods and we will try with a Webview.</string>
    <string name="h_activity">Method 1: Object only available inside the Class! Located after the main void.</string>
    <string name="i_activity">As you have seen in the picture, Eclipse will recommend us to make the imports.</string>
    <string name="j_activity">Method 2: Object available in all the Activity! Located before the main void.</string>
    
    <string name="a_manifest">Every Android App must have an AndroidManifest.xml file in the root directory of your app project. And it’s automatically created with the Eclipse new project option. But what does it do? Why is it so Important? With the AndroidManifest.xml you will give the android package of your app, the name of the activity, the theme you will use, the minimum API your app will support… Also with Eclipse the manifest will allow you to compile the .apk just with a couple of clicks.</string>
    <string name="b_manifest">Work with the Manifest in Eclipse</string>
    <string name="c_manifest">The Structure of the manifest in Eclipse is distributed in different tabs like: Manifest, Application, Permissions till AndroidManifest.xml. For now we will start with the AndroidManifest.xml section.</string>
    <string name="d_manifest">Structure</string>
    <string name="e_manifest">The App manifest that Eclipse provides you is made to work with your sample activity, but you can improve how your app works. So we will analyze how the manifest is made as default and understand what it means.</string>
    <string name="f_manifest">In the picture we see the xml declaration, and we will not change it… Then we find the declaration of the manifest inside this xml, after declaring the source of this manifest, we declare the package we will use and the version code/name. The name of the package must be the folder where the activity is located. Then we find the android:versionCode and android:versionName. The versionName will be used by the user to know what version they are using and the versionCode will be used by Play Store to upgrade the app.</string>
    <string name="g_manifest">In this second picture we are declaring the API or SDK version for our app. In this case we design our app for API 17, but we offer compatibility with API 8 or above.</string>
    <string name="h_manifest">In this third picture we are declaring the application resources as the icon, the App Name or the App Theme. We are always getting the values from the res/drawable or res/values folder. </string>
    <string name="i_manifest">In this picture we start declaring the values of the activity. Inside the Package we already declared we will establish the name of our Activity and the Name that we will give to the Android OS. Also with these intent-filters we are saying to Android that the application should appear in the App list and also we are telling to Android what Activity should it open when calling to the app.</string>
    <string name="j_manifest">Finally we will close all the components we have opened like a normal xml file.</string>
    <string name="k_manifest">With these basics you should understand what does the Manifest do, but what happens if we would like to access to internet, to get the GPS location… We should use Permissions. More information of permissions will be added to this tutorial as soon as possible!</string>
    
    <string name="a_layouts">UI is one of the major factors in the world android. If your application looks good people will download it and you have a high likelihood of succeeding. For Google that has always been a priority and has recommended their patterns, such as Holo.\n \nBut how do we define an inviting interface? \n \nWith Eclipse IDE and Google, they offer you the capability of generating code and change it at a visual interface. To access these settings we will use what is called Layout found in xml files in the folder res / layout. After opening the interface locate what you see in the following figure.</string>
    <string name="b_layouts">The figure shows on the left a bar with different contents to our application. We have buttons, text, spinners ... You can drag the content within our application. In the center are the changes we do and how it would look on a real device.\n \nIn the next picture we watch what is on the right side, at the top we find the outline, where is located on a diagrammatic our content. In the bottom of the picture we see the properties box with lots of options for each of these elements. All these properties can be created by text too.</string>
    <string name="c_layouts">For more reference about each of the elements, visit the website developers.android.com.</string>
    
    <string name="a_universal">How to own a universal app?</string>
    <string name="b_universal">We all want USERS, why? Because they make visits and it provides us MONEY. And Developers expect MONEY. Yes, if you get paid with ads you will get a higher chance on clicks, if you sell your app (or you plan to) the active installs will be helpful. So how can we build a universal app?</string>
    <string name="c_universal">Be near your user!</string>
    <string name="d_universal">First of all hear your user feedback, why? Because your users can recommend it to others! How can you improve in this point? If you own a Google Play Developer Account just check out the reviews, if you have feedback on xda or other forums read them carefully!</string>
    <string name="e_universal">Also letting them knowing the content of your app in their mother language will benefit you as your public will grow up. English should be the common ground at first but try to provide the content to other languages: Spanish, French, Italian, German…</string>
    <string name="f_universal">Practice makes perfect!</string>
    <string name="g_universal">How can we make translatable content? Google provides us strings. They are stored in an easy xml format. </string>
    <string name="h_universal">The default language should be stored under values/strings.xml and the localization languages under values-EN/strings.xml.</string>
    <string name="i_universal">TIP: If you use apostrophes you should mark them with a backslash.</string>
    <string name="j_universal">But how can we access those strings from our JAVA or layout xml files? Examples:</string>
    <string name="k_universal">How can others contribute translating my content? You can use git or Launchpad!</string>
    
    
    <string name="menu_settings">Settings</string>
    <string name="future">Future Updates</string>

</resources>
