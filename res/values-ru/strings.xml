<?xml version="1.0" encoding="utf-8"?>
<resources>

    <string name="app_name">Laia</string>
    <string name="app_title">Изучаем Андроид в Андроиде</string>
    
    <string name="what">1. Что такое Андроид?</string>
    <string name="howto">2. Как создавать приложения в Андроид?</string>
    <string name="activities">3. Как использовать действия (activities)?</string>
    <string name="manifest">4. Для чего нужен манифест (manifest)?</string>
    <string name="layouts">5. Как сделать пользовательский интерфейс (UI) с помощью макета (layout)?</string>
    <string name="values">6. Как стать владельцем универсального приложения?</string>
    <string name="menu">7. Как сделать функциональное меню?</string>
    <string name="debug">8. Как отладить моё приложение?</string>
    
    <string name="about">О программе</string>
    <string name="about_title">О LAIA</string>
    <string name="about_text">LAIA или Learn Android in your Android (Изучаем Андроид в Вашем Андроиде) - это справочное приложение для изучения основ разработки в Андроид. Если Вы желаете помочь с каким-нибудь уроком или с приложением в целом, пожалуйста, воспользуйтесь ссылками ниже.</string>
    
    <string name="button_xda">LAIA на XDA</string>
    <string name="button_github">Открытый исходник на GitHub</string>
    <string name="button_paypal">Поддержите проект через PayPal</string>
    <string name="about_donations">Пожертвования через PayPal не гарантируют обновлений или улучшений, они просто поддерживают труд разработчика. Приложение будет оставаться бесплатным и без пожертвований.</string>
    
    <string name="hello_world">Привет, мир!</string>
    
    <string name="title_activity_what">LAIA</string>
    <string name="intro_what">Андроид - это ОС с открытым исходным кодом, созданная Google для мобильных телефонов, планшетов, а также проигрывателей медиа. Первоначально Андроид был разработан Android Inc., а Google купил компанию в 2005 г. Google выкладывает код в соответствии с лицензией Apache в проекте AOSP (Android Open Source Project -проект открытого исходного кода Андроид). В Андроид задействовано большое количество разработчиков, пишущих приложения или создающих пользовательские прошивки, в основном на адаптированных версиях программного языка Java, C, и C++. В данном руководстве Вы узнаете, как начать разработку с помощью JAVA. Изучение C и C++ требует глубоких знаний и времени. Использование этих двух языков поможет Вам создавать ядра и пользовательские прошивки. Поэтому, в этом приложении я просто обучу Вас созданию простых приложений на Java и, возможно, когда-то это приведёт Вас к более глубокому изучению и расширению Ваших навыков разработчика.</string>
    <string name="subtitle_what">Особенности Андроид</string>
    <string name="a_what">UI (User Interface - пользовательский интерфейс) в Андроид основан на прямой манипуляции прикосновением или компьютерной мышью. Можно использовать жесты, нажатия и щипки для манипулирования объектами экрана. Вы сможете создавать эти объекты в Вашем макете (layout) и назначать функции объектов в действиях (activity). Этот функционал будет рассмотрен в руководстве. Устройство взаимодействует с пользователем путём вибрации, акселерометров, гироскопов и других датчиков Вашего приложения.</string>
    <string name="b_what">Устройства Андроид загружают домашний экран посредством приложения лончера (launcher). Эти лончеры созданы со значками и виджетами соответствующего приложения. Сторонние приложения (как и будущие Ваши) доступны на Google Play.</string>
    <string name="c_what">Вверху экрана Вы найдете строку состояния (status bar), показывающую информацию об устройстве и его соединениях. Потянув вниз, можно раскрыть экран уведомлений, где приложения отображают важную информацию или обновления. Уведомления остаются там, пока не будут прочитаны или удалены пользователем.</string>
    <string name="d_what">Пользовательские сборки Андроид</string>
    <string name="e_what">Поскольку Андроид является проектом с открытым кодом, производители могут изменять ОС для своих устройств и также передавать свои обновления в базу AOSP. Но обычно эти обновления приходят очень поздно или не приходят вообще, что обозначается термином "фрагментация". В качестве примера борьбы с фрагментацией можно привести CyanogenMod. Это послепродажный продукт Андроид, основанный на коде AOSP. Он официально предлагается на большое количество устройств и неофициально устанавливается на почти все устройства Андроид.</string>
    
    <string name="title_activity_howto">LAIA</string>
    <string name="intro_howto">Разработка для Андроид основана на библиотеке Java, модифицированной Google, поэтому мы будем использовать такую IDE(interactive development environment - интерактивная среда разработки) Java, как Eclipse или Netbeans. Google в последние годы сфокусировал своё внимание на Eclipse IDE, создав для разработки специальный плагин. Это руководство не предусматривает обучение настройке Eclipse IDE. Найдите в Google, как установить плагин ADT (android development tool - инструмент разработки андроид) и скачайте SDK (software development kit - набор разработки программ) для Вашей ОС. Рекомендую устанавливать базы 2.3 и 4.X. Кроме того, если хотите улучшить любое приложение на Вашем мобильном устройстве, можете попробовать AIDE (android integrated development environment - интегрированная среда разработки андроид).</string>
    <string name="subtitle_howto">Интерфейс и рабочее пространство Eclipse</string>
    <string name="a_howto">Допустим, Вы уже установили Eclipse Juno, так как мы будем использовать его с плагином ADT и последней версией Андроид SDK. Внутри Eclipse IDE с пункта в меню File/new/Project (Файл/новый/проект)мы начнём нашу работу. В этой второй главе мы создадим тестовый проект.</string>
    <string name="b_howto">В окне New Android Application (новое приложение андроид) мы определим имя, пакет, версию… нашего нового приложения. Рекомендую использовать от 2.2 до 4.X (В зависимости от пакетов, установленных в Вашем SDK). На данном этапе мы вибираем дизайн Holo, основанный на направляющих 4.0+.</string>
    <string name="c_howto">По заполнении этого окна, новый проект создан и мы можем увидеть наш макет! В Андроид мы столкнемся с двумя основными способами разработки, графическим способом (с использованием макетов, как в главе 5, и добавлением источников кода) и кодированием (с использованием действий, как в главе 3). Но, для создания хорошего приложения, необходимо использовать оба способа, о чём мы и поговорим в этой книге.</string>
    <string name="d_howto">Анализ того, что Google предоставляет в пустом приложении</string>
    <string name="e_howto">Мы создали наше первое приложение, в чём Google оказал нам существенную поддержку. Во-первых, он дал нам часть необходимого кода для работы приложения. поэтому приложение работает без добавления чего-либо ещё, но оно показывает только предложение Hello World!</string>
    <string name="f_howto">Как мы видим на рисунке, наше приложение структурировано; теперь мы рассмотрим некоторые из компонентов структуры. Файлы .java содержат Activities (действия), этот файл нужен для запуска нашего приложения, и дополнительные функции будут сделаны внутри этого файла (глава 3). Папка gen содержит некоторые файлы, которые нельзя удалять! В папке res Вы найдете файлы Layout (макета) (глава 5), файлы меню (глава 7) и файлы Strings (строки) (глава 6). Также в папке res мы найдём папки drawables (графика), куда помещаются изображения для приложения. Наконец, мы находим манифест AndroidManisfest.xml, где располагается вся информация о приложении Андроид ОС, такой как разрешения, действия… (глава 4). Итак, давайте, не мешкая, приступим к настоящему программированию, что и рассмотрим в следующих главах!</string>
    
    <string name="title_activity_activities">LAIA</string>
    <string name="a_activity">Activity (действие)- это основа Вашего будущего приложения. Оно начинается с создания приложения на устройстве и позволит Вам включить дополнительные опции в приложение. Но мы здесь не для теории, давайте начнем работу с действиями.</string>
    <string name="b_activity">Структура пустого приложения</string>
    <string name="c_activity">На рисунке Вы можете видеть пакет, который мы выбрали в начале проекта. Ссылка на пакет находится в domain.apppackage.appname. В моём случае, я использовал "org.sferadev.tryme". В качестве домена я установил org, имя разработчика в качестве apppackage, имя проекта в appname. Внутри нового Activity, в папке источника (src), мы находим файл .java.</string>
    <string name="d_activity">Основное в моём Activity</string>
    <string name="e_activity">В своём проекте я создал TryActivity.java и activity_try.xml. Сейчас мы будем сравнивать автоматически сгенерированный код внутри нашего приложения.</string>
    <string name="f_activity">Как мы определяем компоненты?</string>
    <string name="g_activity">Андроид основан на JAVA, это объектный язык. Мы создадим объекты, определим каждый из них и его свойства. Мы можем определить его внутри Activity или в Layout. Поскольку эта глава касается действий, рассмотрим предмет внутри нашей Activity. Есть два метода, попробуем их рассмотреть.</string>
    <string name="h_activity">Метод 1: объект доступен только внутри Class (класса)! Расположен за основным void (спецификатором типа).</string>
    <string name="i_activity">Как можно видеть на рисунке, Eclipse рекомендует нам сделать импорт.</string>
    <string name="j_activity">Метод 2: объект доступен во всём Activity! Расположен перед основным void.</string>
    
    <string name="a_manifest">Каждое приложение Андроид должно иметь файл манифеста AndroidManifest.xml в корне Вашего проекта приложения. Он автоматически создаётся с опцией нового проекта Eclipse. Но для чего он нужен? Почему он так важен? С AndroidManifest.xml вы задаёте пакет Андроид Вашего приложения, имя activity, тему, которую будете использовать, минимальную версию API (application programming interface - интерфейс прикладного программирования), который будет поддерживать приложение… Также, вместе с Eclipse, манифест позволит собрать файл .apk в пару кликов.</string>
    <string name="b_manifest">Работа с манифестом в Eclipse</string>
    <string name="c_manifest">Структура манифеста в Eclipse распределяется на различные вкладки: Manifest (манифест), Application (приложение), Permissions (разрешение), образующие AndroidManifest.xml. Начнём разбираться с секцией AndroidManifest.xml.</string>
    <string name="d_manifest">Структура</string>
    <string name="e_manifest">Манифест приложения Eclipse сделан для работы с образцом Вашего activity, но Вы можете улучшить работу приложения. Начнём анализ созданного манифеста по умолчанию и разберёмся, что он значит.</string>
    <string name="f_manifest">На рисунке мы видим xml declaration (декларацию), её мы менять не будем… Затем мы находим декларацию манифеста внутри этого xml, после декларирования источника этого манифеста, мы декларируем пакет, который будем использовать, и версю кода/имени. Имя пакета должно соответствовать папке, где находится activity. Затем мы находим android:versionCode и android:versionName. VersionName нужна, чтобы узнать, какая версия используется, а versionCode будет использоваться Play Store для обновления приложения.</string>
    <string name="g_manifest">На втором рисунке мы декларируем версию API или SDK нашего приложения. В данном случае мы применили для приложенияr API 17, но  предлагаем совместимость с API 8 или выше.</string>
    <string name="h_manifest">На третьем рисунке мы декларируем ресурсы приложения, такие как значок, имя или тема приложения. Значения мы всегда берём из папок res/drawable или res/values.</string>
    <string name="i_manifest">На этом рисунке мы начинаем декларацию значений activity. Внутри пакета мы уже декларировали, что будем устанавливать имя нашего Activity и имя, которое передаём в ОС Андроид. Также с помощью данных интент-фильтров (intent-filter) мы сообщаем Андроиду, что приложение  должно появиться в списке приложений и указываем, какое Activity должно открываться при вызове приложения.</string>
    <string name="j_manifest">Наконец, мы закрываем все компоненты, которые открыли, как обычный файл xml.</string>
    <string name="k_manifest">С помощью этих основных знаний Вы должны понять, что делает манифест, однако, непонятно, что будет, если мы захотим войти в интернет, получить данные GPS… Мы должны использовать Permissions (разрешения). Более подробная информация о разрешениях будет добавлена в это руководство как можно более оперативно!</string>
    
    <string name="a_layouts">UI (user unterface - пользовательский интерфейс)является одним из важнейших факторов в мире Андроид. Если Ваше приложение выглядит хорошо, люди будут загружать его и вероятность  развития приложения повысится. Для Google это всегда было приоритетом, он рекомендует свои шаблоны, такие, как Holo.\n \nНо как нам определить интерфейс приветствия? \n \nEclipse IDE и Google предлагают Вам возможности генерации кода и изменения его в визуальном интерфейсе. Для доступа к этим установкам мы будем использовать то, что называется Layout (макет), расположенный в файлах xml в папке res / layout. После открытия интерфейса найдите то, что Вы видите на следующем рисунке.</string>
    <string name="b_layouts">Рисунок показывает располагающуюся слева панель с различным содержанием для нашего приложения. У нас есть кнопки, тексты, выпадающие меню ... Можете переместить содержание внутри нашего приложения. В центре видим изменения, которые мы делаем и то, как они будут выглядеть в настоящем устройстве.\n \nНа следующем рисунке с правой стороны, вверху, мы видим диаграмму с нашим содержанием. Внизу рисунка мы видим панель свойств с большим количеством опций для каждого из этих элементов. Все эти свойства можно создать и текстом.</string>
    <string name="c_layouts">Для дополнительной информации для каждого из элементов, пожалуйста, посетите сайт developers.android.com.</string>
    
    <string name="a_universal">Как стать владельцем универсального приложения?</string>
    <string name="b_universal">Всем нам нужны ПОЛЬЗОВАТЕЛИ, почему? Потому что они обеспечивают посещения и это даёт нам ДЕНЬГИ. А разработчики ждут ДЕНЬГИ. Да, если Вам платят за обновления, Вам нужно больше кликов, если Вы продаёте приложение (или планируете это сделать), Вам нужны активные установки. Итак, как же нам сделать универсальное приложение?</string>
    <string name="c_universal">Будьте рядом с пользователем!</string>
    <string name="d_universal">Прежде всего, прислушивайтесь к отзывам пользователей, знаете, почему? Потому что Ваши пользователи могут рекомендовать приложение другим! Как улучшить ситуацию в этом отношении? Если у Вас есть аккаунт разработчика Google Play, просто смотрите обзоры, если Вы поддерживаете обратную связь через xda или другие форумы, внимательно их читайте!</string>
    <string name="e_universal">Также подача содержимого приложения на родном языке пользователя поможет Вам, поскольку Ваша публика увеличится. Английский должен быть основой в начале, но постарайтесь перевести содержимое на другие языки: испанский, французкий, итальянский, немецкий…</string>
    <string name="f_universal">Практика даёт улучшение!</string>
    <string name="g_universal">Как сделать содержимое переводимым? Google даёт нам строки (strings). Они сохранены в простом формате xml. </string>
    <string name="h_universal">Язык по умолчанию должен быть в values/strings.xml, а локализованные языки - в values-EN/strings.xml.</string>
    <string name="i_universal">Совет: если использовать апострофы, нужно выделять их обратной наклонной чертой.</string>
    <string name="j_universal">Но как попасть в эти строки из наших файлов JAVA или xml макета? Примеры:</string>
    <string name="k_universal">Как другие могут помочь с переводом содержимого? Можно использовать git или Launchpad!</string>
        
		
    <string name="menu_settings">Параметры</string>
    <string name="future">Будущие обновления</string>

</resources>
